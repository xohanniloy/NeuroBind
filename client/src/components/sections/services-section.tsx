import React, { useState } from "react";
import { Brain, TrendingUp, Users, Magnet, FileText, Palette, Check, ChevronDown, ChevronUp, Zap, Star, ArrowRight } from "lucide-react";

export default function ServicesSection(): React.JSX.Element {
  const [expandedCard, setExpandedCard] = useState<number | null>(null);
  const [hoveredCard, setHoveredCard] = useState<number | null>(null);
  const services = [
    {
      slug: 'neuro-website',
      icon: Brain,
      title: "Neuro Marketing ржнрж┐рждрзНрждрж┐ржХ Website",
      description: "ржЖржорж░рж╛ рж╢рзБржзрзБ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржмрж┐рж▓рзНржб ржХрж░рж┐ ржирж╛, ржЖржорж░рж╛ ржмрж┐рж▓рзНржб ржХрж░рж┐ Psychology-driven Conversion Machineред",
      features: [
        "ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржЬрж╛ржЗржи ржорж╛ржирзБрж╖рзЗрж░ ржмрзНрж░рзЗржЗржирзЗ ржкрзНрж░рзБржнрзЗржи ржкрзНрж░ржнрж╛ржм ржлрзЗрж▓рзЗ",
        "ржкрзНрж░рждрж┐ржЯрж┐ CTA рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐ржХрзНржпрж╛рж▓рж┐ ржЕржкржЯрж┐ржорж╛ржЗржЬржб",
        "ржкрзНрж░рждрж┐ржЯрж┐ ржХрж╛рж▓рж╛рж░ ржХржиржнрж╛рж░рзНрж╢ржи ржмрж╛ржбрж╝рж╛ржпрж╝"
      ],
      advanced: [
        "ржирж┐ржЙрж░рзЛ-рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐ржХрзНржпрж╛рж▓ ржбрж┐ржЬрж╛ржЗржи ржкрзНржпрж╛ржЯрж╛рж░рзНржи",
        "ржнрж┐ржЬрзБржпрж╝рж╛рж▓ рж╣рж╛ржпрж╝рж╛рж░рж╛рж░рзНржХрж┐ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи",
        "ржЗржЙржЬрж╛рж░ ржмрж┐рж╣рзЗржнрж┐ржпрж╝рж╛рж░ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ",
        "ржХржиржнрж╛рж░рзНрж╢ржи ржлрж╛ржирзЗрж▓ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи"
      ],
      stats: { success: "350%", metric: "Conversion ржмрзГржжрзНржзрж┐" }
    },
    {
      slug: 'neuro-content',
      icon: TrendingUp,
      title: "Neuro Marketing ржнрж┐рждрзНрждрж┐ржХ Content",
      description: "\"Content is King\" тАУ ржХрж┐ржирзНрждрзБ Neuro Marketing-ржП Content is Cashред",
      features: [
        "ржнрж┐ржЬрж┐ржЯрж░рзЗрж░ ржЖржмрзЗржЧ ржЫрзБржБржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛ ржХржиржЯрзЗржирзНржЯ",
        "ржЕрзНржпрж╛ржХрж╢ржирзЗ ржирж┐ржпрж╝рзЗ ржЖрж╕рж╛ ржХржкрж┐рж░рж╛ржЗржЯрж┐ржВ",
        "рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐ржХрзНржпрж╛рж▓ ржЯрзНрж░рж┐ржЧрж╛рж░ ржмрзНржпржмрж╣рж╛рж░"
      ],
      advanced: [
        "ржирж┐ржЙрж░рзЛ-рж▓рж┐ржЩрзНржЧрзБржЗрж╕рзНржЯрж┐ржХ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ",
        "ржЗржорзЛрж╢ржирж╛рж▓ ржЯрзНрж░рж┐ржЧрж╛рж░ ржорзНржпрж╛ржкрж┐ржВ",
        "ржкрж╛рж░рж╕рзБржпрж╝рзЗрж╢ржи рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐ ржлрзНрж░рзЗржоржУржпрж╝рж╛рж░рзНржХ",
        "ржмрж┐рж╣рзЗржнрж┐ржпрж╝рж╛рж░рж╛рж▓ ржХржкрж┐рж░рж╛ржЗржЯрж┐ржВ ржкрзНржпрж╛ржЯрж╛рж░рзНржи"
      ],
      stats: { success: "280%", metric: "Engagement ржмрзГржжрзНржзрж┐" }
    },
    {
      slug: 'lead-magnet',
      icon: Magnet,
      title: "Neuro Marketing ржнрж┐рждрзНрждрж┐ржХ Lead Magnet",
      description: "ржнрж┐ржЬрж┐ржЯрж░ржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржХрж┐ржЫрзБ ржмрж┐ржХрзНрж░рж┐ ржирж╛ ржХрж░рзЗ ржЖржЧрзЗ рждрж╛рж░ ржХрж╛ржЫрзЗ ржмрж┐рж╢рзНржмрж╛рж╕ рждрзИрж░рж┐ ржХрж░рждрзЗ рж╣ржпрж╝ред",
      features: [
        "ржнрж┐ржЬрж┐ржЯрж░рзЗрж░ ржнржпрж╝ ржХржорж╛ржирзЛ рж▓рж┐ржб ржорзНржпрж╛ржЧржирзЗржЯ",
        "ржмрж┐рж╢рзНржмрж╛рж╕ рждрзИрж░рж┐ржХрж╛рж░рзА ржЕржлрж╛рж░",
        "рж╣рж╛ржЗ-ржХржиржнрж╛рж░рзНржЯрж┐ржВ ржЕржкрзНржЯ-ржЗржи ржлрж░рзНржо"
      ],
      advanced: [
        "ржбрж╛ржпрж╝ржирж╛ржорж┐ржХ ржкрж╛рж░рзНрж╕рзЛржирж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржЗржЮрзНржЬрж┐ржи",
        "ржмрж┐рж╣рзЗржнрж┐ржпрж╝рж╛рж░рж╛рж▓ ржЯрзНрж░рж┐ржЧрж╛рж░ ржЕржЯрзЛржорзЗрж╢ржи",
        "рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐-ржмрзЗрж╕ржб ржлрж╛ржирзЗрж▓ ржбрж┐ржЬрж╛ржЗржи",
        "ржорж╛ржЗржХрзНрж░рзЛ-ржорзЛржорзЗржирзНржЯ ржХрзНржпрж╛ржкржЪрж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржо"
      ],
      stats: { success: "450%", metric: "Lead Quality ржмрзГржжрзНржзрж┐" }
    },
    {
      slug: 'neuro-script',
      icon: FileText,
      title: "Neuro Marketing ржнрж┐рждрзНрждрж┐ржХ Script",
      description: "ржнрж┐ржбрж┐ржУ, ржмрж┐ржЬрзНржЮрж╛ржкржи ржмрж╛ ржУржпрж╝рзЗржмрж┐ржирж╛рж░рзЗрж░ ржЬржирзНржп рж╕ржарж┐ржХ рж╕рзНржХрзНрж░рж┐ржкрзНржЯ = ржХрж╛рж╕рзНржЯржорж╛рж░рзЗрж░ ржоржирзЗрж░ ржжрж░ржЬрж╛ ржЦрзЛрж▓рж╛рж░ ржЪрж╛ржмрж┐ред",
      features: [
        "ржорж╛ржирзБрж╖рзЗрж░ ржЕржмржЪрзЗрждржи ржоржиржХрзЗ ржкрзНрж░ржнрж╛ржмрж┐ржд ржХрж░рж╛",
        "ржЕрзНржпрж╛ржХрж╢ржирзЗ ржмрж╛ржзрзНржп ржХрж░рж╛ рж╕рзНржХрзНрж░рж┐ржкрзНржЯ",
        "ржЗржорзЛрж╢ржирж╛рж▓ ржХрж╛ржирзЗржХрж╢ржи рждрзИрж░рж┐"
      ],
      advanced: [
        "ржирж┐ржЙрж░рзЛ-рж▓рж┐ржЩрзНржЧрзБржЗрж╕рзНржЯрж┐ржХ рж╕рзНржХрзНрж░рж┐ржкрзНржЯрж┐ржВ",
        "рж╕рж╛ржмрж▓рж┐ржорж┐ржирж╛рж▓ ржорзЗрж╕рзЗржЬрж┐ржВ ржЯрзЗржХржирж┐ржХ",
        "ржкрж╛рж░рж╕рзБржпрж╝рзЗрж╢ржи рж╕рж┐ржХрзБржпрж╝рзЗржирзНрж╕рж┐ржВ",
        "ржХржЧржирж┐ржЯрж┐ржн ржмрж╛ржпрж╝рж╛рж╕ ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗрж╢ржи"
      ],
      stats: { success: "300%", metric: "Response Rate ржмрзГржжрзНржзрж┐" }
    },
    {
      slug: 'business-consultancy',
      icon: Users,
      title: "Neuro Marketing ржнрж┐рждрзНрждрж┐ржХ Business Consultancy",
      description: "ржмрж┐ржЬржирзЗрж╕рзЗ ржЧрзНрж░рзЛрже рж╢рзБржзрзБ рж╕рзНржЯрзНрж░рзНржпрж╛ржЯрзЗржЬрж┐ ржжрж┐ржпрж╝рзЗ ржЖрж╕рзЗ ржирж╛, ржЧрзНрж░рж╛рж╣ржХрзЗрж░ ржоржирзЗрж░ ржнрзЗрждрж░рзЗ ржврзБржХрждрзЗ ржЬрж╛ржирждрзЗ рж╣ржпрж╝ред",
      features: [
        "Neuro Marketing ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржмрзНрж░рзНржпрж╛ржирзНржб ржмрж┐рж▓рзНржбрж┐ржВ",
        "ржмрж┐рж╢рзНржмрж╛рж╕ржпрзЛржЧрзНржп ржУ рж▓рж╛ржнржЬржиржХ ржХрж░рж╛",
        "ржмрж┐ржЬржирзЗрж╕рзЗрж░ ржЬржирзНржп ржкрзНрж░ржкрж╛рж░ ржкрзНрж▓рзНржпрж╛ржи"
      ],
      advanced: [
        "рж╕рж╛ржЗржХрзЛржЧрзНрж░рж╛ржлрж┐ржХ ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рзЗржЧржорзЗржирзНржЯрзЗрж╢ржи",
        "ржирж┐ржЙрж░рзЛ-ржЗржХрзЛржиржорж┐ржХ ржкрзНрж░рж╛ржЗрж╕рж┐ржВ рж╕рзНржЯрзНрж░рзНржпрж╛ржЯрзЗржЬрж┐",
        "ржмрж┐рж╣рзЗржнрж┐ржпрж╝рж╛рж░рж╛рж▓ ржмрзНрж░рзНржпрж╛ржирзНржбрж┐ржВ ржлрзНрж░рзЗржоржУржпрж╝рж╛рж░рзНржХ",
        "ржХржЧржирж┐ржЯрж┐ржн ржЧрзНрж░рзЛрже рж╣рзНржпрж╛ржХрж┐ржВ"
      ],
      stats: { success: "400%", metric: "Business Growth" }
    },
    {
      slug: 'full-branding',
      icon: Palette,
      title: "Full Branding (ржлрзБрж▓ ржмрзНрж░рзНржпрж╛ржирзНржбрж┐ржВ)",
      description: "ржПржХржЯрж┐ ржмрзНржпржмрж╕рж╛ рж╢рзБржзрзБ рж▓рзЛржЧрзЛ ржмрж╛ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржжрж┐ржпрж╝рзЗ ржмрзНрж░рзНржпрж╛ржирзНржб рж╣ржпрж╝ ржирж╛ред ржмрзНрж░рзНржпрж╛ржирзНржбрж┐ржВ ржорж╛ржирзЗ рж╣рж▓рзЛ, ржорж╛ржирзБрж╖рзЗрж░ ржоржирзЗ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржПржХржЯрж┐ рж╕рзНржерж╛ржпрж╝рзА ржЗржорзЗржЬ рждрзИрж░рж┐ ржХрж░рж╛ред",
      features: [
        "Logo ржерзЗржХрзЗ Color Palette ржкрж░рзНржпржирзНржд рж╕ржм",
        "Typography ржУ Brand Voice ржбрж┐ржЬрж╛ржЗржи",
        "Social Media Presence рж╕ржорзНржкрзВрж░рзНржг рж╕рзЗржЯржЖржк"
      ],
      advanced: [
        "ржирж┐ржЙрж░рзЛ-ржмрзНрж░рзНржпрж╛ржирзНржбрж┐ржВ ржЖрж░рзНржХрж┐ржЯрзЗржХржЪрж╛рж░",
        "рж╕рж╛ржЗржХрзЛрж▓ржЬрж┐ржХрзНржпрж╛рж▓ ржХрж╛рж▓рж╛рж░ ржерж┐ржУрж░рж┐",
        "ржмрзНрж░рзНржпрж╛ржирзНржб ржкрж╛рж░рзНрж╕рзЛржирж╛рж▓рж┐ржЯрж┐ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ",
        "ржЗржорзЛрж╢ржирж╛рж▓ ржмрзНрж░рзНржпрж╛ржирзНржб ржкржЬрж┐рж╢ржирж┐ржВ"
      ],
      stats: { success: "500%", metric: "Brand Recognition" }
    }
  ];

  return (
    <section id="services" className="py-20 bg-neural-bg-secondary relative">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <h2 className="text-5xl font-montserrat font-bold mb-6">
            ржЖржорж╛ржжрзЗрж░ <span className="bg-gradient-to-r from-neuro-purple to-electric-blue bg-clip-text text-transparent">
              Neuro Marketing Based
            </span> рж╕рж╛рж░рзНржнрж┐рж╕рж╕ржорзВрж╣
          </h2>
          <p className="text-xl text-gray-300 max-w-4xl mx-auto leading-relaxed">
            ржЖржорж░рж╛ ржмрж┐рж╢рзНржмрж╛рж╕ ржХрж░рж┐ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ, ржХржиржЯрзЗржирзНржЯ, ржХрж┐ржВржмрж╛ ржмрж┐ржЬржирзЗрж╕ рж╕рзНржЯрзНрж░рзЗржЯрзЗржЬрж┐, рж╕ржмржХрж┐ржЫрзБржЗ рж╕ржлрж▓ рж╣ржпрж╝ рждржЦржиржЗ ржпржЦржи рж╕рзЗржЯрж╛ ржорж╛ржирзБрж╖рзЗрж░ ржмрзНрж░рзЗржЗржирзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржШржЯрж╛ржпрж╝ред рждрж╛ржЗ ржЖржорж╛ржжрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ рж╕рж╛рж░рзНржнрж┐рж╕ Neuro Marketing-ржПрж░ ржЧржнрзАрж░ рж░рж┐рж╕рж╛рж░рзНржЪ ржУ ржкрзНрж░рзБржнрзЗржи ржЯрзЗржХржирж┐ржХрзЗрж░ ржУржкрж░ ржжрж╛ржБржбрж╝рж╛ржирзЛред
          </p>
          <p className="text-lg text-electric-blue mt-4 font-semibold">
            ЁЯСЙ ржирж┐ржЪрзЗ ржжрзЗржЦрзБржи, ржХрзЛржи рж╕рж╛рж░рзНржнрж┐рж╕ржЯрж┐ ржЖржкржирж╛рж░ ржЬржирзНржп рж╕ржмржЪрзЗржпрж╝рзЗ ржжрж░ржХрж╛рж░рж┐:
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {services.map((service, index) => (
            <div 
              key={index}
              className={`relative glassmorphism-dark rounded-2xl p-8 hover-lift group overflow-hidden transition-all duration-500 cursor-pointer animate-shimmer ${
                expandedCard === index ? 'scale-105 z-10' : 'hover:scale-105'
              }`}
              style={{animationDelay: `${index * 0.1}s`}}
              onClick={() => setExpandedCard(expandedCard === index ? null : index)}
              onMouseEnter={() => setHoveredCard(index)}
              onMouseLeave={() => setHoveredCard(null)}
            >
              {/* Animated border effect */}
              <div className={`absolute inset-0 bg-gradient-to-r from-electric-blue via-neuro-purple to-neon-green transition-opacity duration-300 rounded-2xl ${
                hoveredCard === index || expandedCard === index ? 'opacity-20' : 'opacity-0'
              }`}></div>
              
              {/* Floating particles effect */}
              {hoveredCard === index && (
                <div className="absolute inset-0 pointer-events-none">
                  {[...Array(6)].map((_, i) => (
                    <div
                      key={i}
                      className="absolute w-2 h-2 bg-electric-blue rounded-full animate-bounce-gentle opacity-60"
                      style={{
                        left: `${20 + i * 15}%`,
                        top: `${10 + (i % 3) * 30}%`,
                        animationDelay: `${i * 0.2}s`,
                        animationDuration: '2s'
                      }}
                    />
                  ))}
                </div>
              )}
              
              <div className="relative z-10">
                {/* Stats Badge */}
                <div className="absolute -top-4 -right-4 bg-gradient-to-r from-neon-green to-electric-blue text-white text-xs px-3 py-1 rounded-full font-bold animate-bounce-gentle">
                  +{service.stats.success}
                </div>
                
                <div className={`text-electric-blue text-4xl mb-6 transition-all duration-500 ${
                  hoveredCard === index ? 'scale-110 rotate-12' : ''
                }`}>
                  <service.icon size={48} />
                </div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className={`text-2xl font-montserrat font-semibold text-neuro-purple transition-colors duration-300 ${
                    hoveredCard === index ? 'text-electric-blue' : ''
                  }`}>
                    {service.title}
                  </h3>
                  <div className={`transition-transform duration-300 ${
                    expandedCard === index ? 'rotate-180' : ''
                  }`}>
                    {expandedCard === index ? (
                      <ChevronUp className="text-electric-blue" size={20} />
                    ) : (
                      <ChevronDown className="text-gray-400" size={20} />
                    )}
                  </div>
                </div>
                <p className={`text-gray-300 mb-6 transition-colors duration-300 ${
                  hoveredCard === index ? 'text-white' : ''
                }`}>
                  {service.description}
                </p>
                <ul className="text-sm text-gray-400 space-y-3 mb-6">
                  {service.features.map((feature, featureIndex) => (
                    <li 
                      key={featureIndex} 
                      className={`flex items-center transition-transform duration-300 ${
                        hoveredCard === index ? 'translate-x-2' : ''
                      }`}
                      style={{transitionDelay: `${featureIndex * 0.1}s`}}
                    >
                      <Check className={`text-neon-green mr-3 h-4 w-4 transition-transform duration-300 ${
                        hoveredCard === index ? 'scale-125' : ''
                      }`} />
                      <span className={`transition-colors duration-300 ${
                        hoveredCard === index ? 'text-gray-200' : ''
                      }`}>
                        {feature}
                      </span>
                    </li>
                  ))}
                </ul>
                
                {/* View Details Button */}
                <a 
                  href={`/services/${service.slug}`}
                  className="block w-full bg-gradient-to-r from-electric-blue to-neuro-purple text-white text-center py-3 rounded-lg font-semibold hover:from-neuro-purple hover:to-electric-blue transition-all duration-300 group"
                  onClick={(e) => e.stopPropagation()}
                >
                  <span className="flex items-center justify-center gap-2">
                    ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржжрзЗржЦрзБржи
                    <ArrowRight className="group-hover:translate-x-1 transition-transform" size={16} />
                  </span>
                </a>
                
                {/* Expanded Content */}
                <div className={`transition-all duration-500 overflow-hidden ${
                  expandedCard === index ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
                }`}>
                  <div className="border-t border-electric-blue/30 pt-4 mt-4">
                    <div className="flex items-center mb-3">
                      <Zap className="text-neon-green mr-2" size={16} />
                      <span className="text-sm font-semibold text-electric-blue">Advanced Features</span>
                    </div>
                    <ul className="text-sm text-gray-300 space-y-2 mb-4">
                      {service.advanced.map((feature, advIndex) => (
                        <li key={advIndex} className="flex items-center">
                          <Star className="text-yellow-400 mr-2 h-3 w-3" />
                          {feature}
                        </li>
                      ))}
                    </ul>
                    <div className="bg-gradient-to-r from-electric-blue/20 to-neon-green/20 rounded-lg p-3 text-center">
                      <div className="text-2xl font-bold text-neon-green">+{service.stats.success}</div>
                      <div className="text-xs text-gray-300">{service.stats.metric}</div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Enhanced hover glow effect */}
              <div className={`absolute inset-0 transition-opacity duration-300 pointer-events-none ${
                hoveredCard === index || expandedCard === index ? 'opacity-100' : 'opacity-0'
              }`}>
                <div className="absolute top-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-electric-blue to-transparent"></div>
                <div className="absolute bottom-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-neuro-purple to-transparent"></div>
                <div className="absolute left-0 top-0 w-px h-full bg-gradient-to-b from-transparent via-neon-green to-transparent"></div>
                <div className="absolute right-0 top-0 w-px h-full bg-gradient-to-b from-transparent via-electric-blue to-transparent"></div>
              </div>
              
              {/* Click indicator */}
              {expandedCard === index && (
                <div className="absolute inset-0 bg-electric-blue/5 rounded-2xl animate-pulse"></div>
              )}
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
